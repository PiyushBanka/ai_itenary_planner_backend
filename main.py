import os
from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
import json
from dotenv import load_dotenv
from itenaryPlanner import ItineraryPlanner
from models import Coordinates, ProminentLocation, UserPreferences, SwipeDecision, ItineraryRequest
import logging

# Load environment variables from .env file
load_dotenv()


# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)


# Create FastAPI app
app = FastAPI(
    title="Travel Itinerary API",
    description="API for generating personalized travel itineraries",
    version="1.0.0",
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://localhost:3000", "http://127.0.0.1:5173"],  # Frontend dev servers
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# Global variable for the planner
planner = None

@app.on_event("startup")
async def startup_event():
    """Initialize the ItineraryPlanner on application startup."""

    # API keys from environment variables
    GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
    GMAPS_API_KEY = os.environ.get("GOOGLE_MAPS_API_KEY")
    WEATHER_API_KEY = os.environ.get("WEATHER_API_KEY") 
    # change this to google cloud secret manager or aws secret manager in production

    # Log API key status (without exposing the actual keys)
    print(f"üîë API Keys Status:")
    print(f"   GEMINI_API_KEY: {'‚úÖ SET' if GEMINI_API_KEY else '‚ùå NOT SET'}")
    print(f"   GOOGLE_MAPS_API_KEY: {'‚úÖ SET' if GMAPS_API_KEY else '‚ùå NOT SET'}")
    print(f"   WEATHER_API_KEY: {'‚úÖ SET' if WEATHER_API_KEY else '‚ùå NOT SET'}")

    global planner
    planner = ItineraryPlanner(
        gmaps_key=GMAPS_API_KEY, 
        weather_key=WEATHER_API_KEY, 
        gemini_key=GEMINI_API_KEY
    )
    print("‚úÖ ItineraryPlanner initialized successfully")
    print(f"   Enhanced planner: {'‚úÖ Ready' if planner.enhanced_planner else '‚ùå Failed'}")
    print(f"   Gemini v0 planner: {'‚úÖ Ready' if planner.gemini_v0_planner else '‚ùå Failed'}")
    print(f"   Gemini v0 model: {'‚úÖ Configured' if planner.gemini_v0_planner.gemini_model else '‚ùå Not configured'}")

def get_planner():
    """Dependency to get the ItineraryPlanner instance."""
    return planner

@app.get("/")
async def root():
    """Root endpoint to check if the API is running."""
    return {"message": "Travel Itinerary API is running"}


@app.post("/api_v1/generate-itinerary")
async def generate_itinerary(
    request: ItineraryRequest,
    planner: ItineraryPlanner = Depends(get_planner)
):
    """
    Generate a personalized travel itinerary based on user preferences and swipe decisions.
    
    Parameters:
    - preferences: User's travel preferences
    - swipe_decisions: User's decisions on locations (like, superlike, or dislike)
    
    Returns:
    - A structured travel itinerary
    """
    # Generate the itinerary using the planner
    itinerary = planner.generate_itenary(request.preferences, request.swipe_decisions)
    return itinerary


@app.post("/api_v1/generate-itinerary-v0")
async def generate_itinerary_v0(
    request: ItineraryRequest,
    planner: ItineraryPlanner = Depends(get_planner)
):
    """
    Generate a personalized travel itinerary using the Gemini v0 method.
    This is an alternative approach that uses direct Gemini AI generation.
    
    Parameters:
    - preferences: User's travel preferences
    - swipe_decisions: User's decisions on locations (like, superlike, or dislike)
    
    Returns:
    - A structured travel itinerary generated by Gemini AI
    """
    # Generate the itinerary using the v0 planner
    itinerary = planner.generate_itenaryv0(request.preferences, request.swipe_decisions)
    return itinerary



@app.post("/api_v1/prominent-locations")
async def get_prominent_locations(
    preferences: UserPreferences,
    planner: ItineraryPlanner = Depends(get_planner)
):
    """
    Get a list of prominent locations based on user preferences.
    
    Parameters:
    - preferences: User's travel preferences including city and interests
    
    Returns:
    - A list of prominent locations matching the criteria
    """
    logger.info(f"Getting prominent locations for {preferences.city}")
    locations = planner.get_prominent_locations(preferences)
    return {"locations": locations}
    


# Example usage for documentation purposes
@app.get("/example-request")
async def example_request():
    """
    Returns an example of a valid request body for the /generate-itinerary endpoint.
    Useful for API documentation and testing.
    """
    example = {
        "preferences": {
            "city": "Goa",
            "city_id": "1",
            "main_tickets_booked": True,
            "start_datetime": "2025-10-23T10:00:00",
            "start_location": "Charles de Gaulle Airport (CDG)",
            "end_datetime": "2025-10-26T18:00:00",
            "end_location": "Charles de Gaulle Airport (CDG)",
            "number_of_adults": 2,
            "number_of_children": 0,
            "budget_per_person": 1000,
            "local_transport": "public",
            "hotel_quality": "standard",
            "pool_required": False,
            "interests": ["art", "history", "views"],
            "description_of_trip": "A romantic getaway focused on museums and iconic sights."
        },
        "swipe_decisions": [
            {"locationId": "1", "choice": "right"},
            {"locationId": "2", "choice": "superlike"},
            {"locationId": "3", "choice": "left"}
        ]
    }
    return example

if __name__ == "__main__":
    import uvicorn
    # Start the FastAPI server if this file is run directly
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)